package pacman;

import java.awt.Color;
import java.awt.List;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import model.Agent;
import model.Environment;

public class AgentAvatar extends Agent implements KeyListener {
	private int pasX, pasY;
	
	public AgentAvatar(int posX, int posY, Color c, Environment e, boolean trace) {
		super(posX, posY, c, e, trace);
		this.setPasX(0);
		this.setPasY(0);
	}

	
	public void setPathDijkstra(EnvironmentPacman e, List l){
	    int x = e.width, xc = this.posX;
	    int y = e.height, yc = this.posY;
	    int dist = 0;
	    int i=0;
		do{
		    e.agents[xc][yc].dijkstra = dist;
		    dist++; //à gerer avec prise en considération des voisins 
		    i = ajoutListe(e,xc,yc,l);
		    (xc,yx) = l.get(0); // faire une liste de position pour récuperer le doublon
		    l.remove(0);
		}while(l.size() != 0);
	    
      	}

    public int ajoutListe(EnvironmentPacman e, int posX, int posY, List l){
	int i=4;
	if(posValide(posX-1,posY,e))
	    l.add(posX-1,posY);
	else
	    i--;
	if(posValide(posX,posY-1,e))
	    l.add(posX,posY-1);
	else
	    i--;
	if(posValide(posX+1,posY,e))
	    l.add(posX+1,posY);
	else
	    i--;
	if(posValide(posX,posY+1,e))
	    l.add(posX,posY+1);
	else
	    i--;
	return i;
    }

    public boolean posValide(int x,int y, EnvironmentPacman e){
	if(x>0 && x<e.width && y>0 && y<e.height && e.getAgents()[x][y] != -1)
	    return true;
	return false;
    }
	    
	


	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
	
	
	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		switch(e.getKeyCode()){
			case KeyEvent.VK_DOWN : setPasY(-1);
									setPasX(0);
									break;
			case KeyEvent.VK_UP	:	setPasY(1);
							  		setPasX(0);
							  		break;
							  		
			case KeyEvent.VK_LEFT : setPasY(0);
									setPasX(-1);
									break;
									
			case KeyEvent.VK_RIGHT :setPasY(0);
									setPasX(1);
									break;
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {
		setPasY(0);
		setPasX(0);		
	}

	@Override
	public void decide() {
		move(pasX, pasY);
	}

	public int getPasX() {
		return pasX;
	}

	public void setPasX(int pasX) {
		this.pasX = pasX;
	}

	public int getPasY() {
		return pasY;
	}

	public void setPasY(int pasY) {
		this.pasY = pasY;
	}

}
