package vue;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;

import model.Agent;
import model.Environment;
import model.SMA;

public class CanvasGrille extends Canvas implements Observer implements KeyListener{
	private Environment e;
	private ArrayList<Agent> listeAgents;
	public boolean grid;
	public int cSizeX, cSizeY;
	private int type;
	
	public CanvasGrille(Environment env){
		this.e = env;
		this.setSize(cSizeX, cSizeY);
	}
	
	
	public void paint(Graphics g){
		//la ligne en dessous doit permettre de donner un rendu plus dynamique mais elle bug un peu 
		//((Graphics2D) g).setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
		 if(type==2){
			 this.setBackground(Color.cyan);
			 g.setColor(Color.WHITE);
		 }
		else
			g.setColor(Color.BLACK); 
		
		if(this.grid == true){
			int x1 = this.getWidth()/e.height;
			int y1 = this.getHeight()/e.width;        
			for (int x= x1; x<this.getWidth(); x+=x1){
				g.drawLine(x, 0, x, this.getHeight());
			}
	    
		    for (int y= y1; y<this.getHeight(); y+=y1){
		    	g.drawLine(0, y, this.getWidth(),y);
		    }
		    
		}
		
		
		int tailleCaseX = this.cSizeX / e.height;
		int tailleCaseY = this.cSizeY / e.width;

		
		listeAgents = e.getAllBall();
		int posX, posY;
		for(Agent ag : listeAgents){
			posX = ag.getPosX()*getWidth()/e.height;
			posY = ag.getPosY()*getHeight()/e.width;
			g.setColor(ag.getColor());
			g.fillOval(posX, posY, tailleCaseX, tailleCaseY);
		}
	}

	

	@Override
	public void update(Observable o, Object arg) {
		if(arg.equals("env")) {
			SMA temp = (SMA) o;
			this.setEnv(temp.getEnvironnement());
		}
		repaint();
	}
	
	
	public void setEnv(Environment e){
		this.e = e;
		
	}


	public void setCSizeX(int parseInt) {
		this.cSizeX = parseInt;
	}
	
	public void setCSizeY(int parseInt) {
		this.cSizeY = parseInt;
	}
	
	public void setType(int t){
		this.type = t;
	}

}